{"ast":null,"code":"var _jsxFileName = \"/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/location.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { LocationFrame } from './locationFrame';\nimport { database } from './mockBackend/database';\nimport { SearchForLocation } from './searchForLocation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Location(props) {\n  _s();\n\n  const [location, setLocation] = useState({\n    id: '0',\n    name: 'Placeholder',\n    date: '01.02',\n    weather: 'sun',\n    temp: '18',\n    wind: '0'\n  });\n  const datasource = database;\n\n  const searchDatabase = datasource => {\n    const locationData = datasource.filter(location => {\n      return location.name === locationName;\n    });\n\n    if (locationData !== null) {\n      setLocation([{\n        id: generateId(),\n        name: locationData.name,\n        date: locationData.date,\n        weather: locationData.weather,\n        temp: locationData.temp,\n        wind: locationData.wind\n      }]);\n    } else {\n      alert('There exists no location with that name.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LocationFrame, {\n      id: location.id,\n      name: location.name,\n      weather: location.weather,\n      temp: location.temp,\n      wind: location.wind\n    }, location, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Location, \"QJaboqyD73KYufJCPoNIh7EXQQE=\");\n\n_c = Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/location.js"],"names":["React","useState","LocationFrame","database","SearchForLocation","Location","props","location","setLocation","id","name","date","weather","temp","wind","datasource","searchDatabase","locationData","filter","locationName","generateId","alert"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAE5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACrCQ,IAAAA,EAAE,EAAE,GADiC;AAErCC,IAAAA,IAAI,EAAE,aAF+B;AAGrCC,IAAAA,IAAI,EAAE,OAH+B;AAIrCC,IAAAA,OAAO,EAAE,KAJ4B;AAKrCC,IAAAA,IAAI,EAAE,IAL+B;AAMrCC,IAAAA,IAAI,EAAE;AAN+B,GAAD,CAAxC;AASA,QAAMC,UAAU,GAAGZ,QAAnB;;AAEA,QAAMa,cAAc,GAAID,UAAD,IAAgB;AAEnC,UAAME,YAAY,GAAGF,UAAU,CAACG,MAAX,CAAmBX,QAAD,IAAc;AACjD,aAAOA,QAAQ,CAACG,IAAT,KAAkBS,YAAzB;AACH,KAFoB,CAArB;;AAIA,QAAIF,YAAY,KAAK,IAArB,EAA2B;AACvBT,MAAAA,WAAW,CAAC,CAAC;AACTC,QAAAA,EAAE,EAAEW,UAAU,EADL;AAETV,QAAAA,IAAI,EAAEO,YAAY,CAACP,IAFV;AAGTC,QAAAA,IAAI,EAAEM,YAAY,CAACN,IAHV;AAITC,QAAAA,OAAO,EAAEK,YAAY,CAACL,OAJb;AAKTC,QAAAA,IAAI,EAAEI,YAAY,CAACJ,IALV;AAMTC,QAAAA,IAAI,EAAEG,YAAY,CAACH;AANV,OAAD,CAAD,CAAX;AAQH,KATD,MASO;AACHO,MAAAA,KAAK,CAAC,0CAAD,CAAL;AACH;AACJ,GAlBD;;AAoBA,sBACI;AAAA,2BACI,QAAC,aAAD;AAA8B,MAAA,EAAE,EAAEd,QAAQ,CAACE,EAA3C;AAA+C,MAAA,IAAI,EAAEF,QAAQ,CAACG,IAA9D;AAAoE,MAAA,OAAO,EAAEH,QAAQ,CAACK,OAAtF;AAA+F,MAAA,IAAI,EAAEL,QAAQ,CAACM,IAA9G;AAAoH,MAAA,IAAI,EAAEN,QAAQ,CAACO;AAAnI,OAAoBP,QAApB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAtCeF,Q;;KAAAA,Q","sourcesContent":["import React, { useState } from 'react';\nimport { LocationFrame } from './locationFrame';\nimport { database } from './mockBackend/database';\nimport { SearchForLocation } from './searchForLocation';\n\nexport function Location(props) {\n\n    const [location, setLocation] = useState({\n        id: '0',\n        name: 'Placeholder',\n        date: '01.02',\n        weather: 'sun',\n        temp: '18',\n        wind: '0'\n    })\n\n    const datasource = database;\n\n    const searchDatabase = (datasource) => {\n\n        const locationData = datasource.filter((location) => {\n            return location.name === locationName;\n        })\n\n        if (locationData !== null) {\n            setLocation([{\n                id: generateId(),\n                name: locationData.name,\n                date: locationData.date,\n                weather: locationData.weather,\n                temp: locationData.temp,\n                wind: locationData.wind\n            }])\n        } else {\n            alert('There exists no location with that name.');\n        }\n    }\n\n    return (\n        <div>\n            <LocationFrame key={location} id={location.id} name={location.name} weather={location.weather} temp={location.temp} wind={location.wind}/>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}