{"ast":null,"code":"var _jsxFileName = \"/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/location.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Forecaster } from './forecaster';\nimport { LocationFrame } from './locationFrame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Location() {\n  _s();\n\n  const [locations, setLocations] = useState([{\n    location: []\n  }]);\n  const [location, setLocation] = useState([{\n    id: '',\n    //Used as a key to store a location in locations array\n    name: '',\n    weather: '',\n    temp: ''\n  }]);\n\n  const createLocation = dataSource => {\n    setLocation([{\n      id: generateId(),\n      name: dataSource.name,\n      weather: dataSource.weather,\n      temp: dataSource.temp\n    }]);\n  };\n\n  const addLocation = location => {\n    setLocations(prev => {\n      return [...prev, location];\n    });\n  }; //Ikke en elegant løsning men enkel\n\n\n  let idCounter = 0;\n\n  const generateId = () => {\n    return idCounter = idCounter + 1;\n  };\n\n  const database = [{\n    name: 'Paradis',\n    weather: 'cloudLow',\n    temp: '15'\n  }, {\n    name: 'Sandsli',\n    weather: 'cloudMid',\n    temp: '18'\n  }];\n  useEffect(() => {\n    addLocation(createLocation(database));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Forecaster, {\n      locations: locations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Location, \"8vp/VYs1dUq7zw/O3m+/zXYlC+I=\");\n\n_c = Location;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/location.js"],"names":["React","useState","useEffect","Forecaster","LocationFrame","Location","locations","setLocations","location","setLocation","id","name","weather","temp","createLocation","dataSource","generateId","addLocation","prev","idCounter","database"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,aAAT,QAA8B,iBAA9B;;AAEA,OAAO,SAASC,QAAT,GAAoB;AAAA;;AAEvB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,CAAC;AACxCO,IAAAA,QAAQ,EAAE;AAD8B,GAAD,CAAD,CAA1C;AAIA,QAAM,CAACA,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAC;AACtCS,IAAAA,EAAE,EAAE,EADkC;AAC9B;AACRC,IAAAA,IAAI,EAAE,EAFgC;AAGtCC,IAAAA,OAAO,EAAE,EAH6B;AAItCC,IAAAA,IAAI,EAAE;AAJgC,GAAD,CAAD,CAAxC;;AAOA,QAAMC,cAAc,GAAIC,UAAD,IAAgB;AACnCN,IAAAA,WAAW,CAAC,CAAC;AACTC,MAAAA,EAAE,EAAEM,UAAU,EADL;AAETL,MAAAA,IAAI,EAAEI,UAAU,CAACJ,IAFR;AAGTC,MAAAA,OAAO,EAAEG,UAAU,CAACH,OAHX;AAITC,MAAAA,IAAI,EAAEE,UAAU,CAACF;AAJR,KAAD,CAAD,CAAX;AAMH,GAPD;;AASA,QAAMI,WAAW,GAAIT,QAAD,IAAc;AAC9BD,IAAAA,YAAY,CAAEW,IAAD,IAAU;AACnB,aAAO,CAAC,GAAGA,IAAJ,EAAUV,QAAV,CAAP;AACH,KAFW,CAAZ;AAGH,GAJD,CAtBuB,CA4BvB;;;AACA,MAAIW,SAAS,GAAG,CAAhB;;AACA,QAAMH,UAAU,GAAG,MAAM;AACrB,WAAOG,SAAS,GAAGA,SAAS,GAAG,CAA/B;AACH,GAFD;;AAIA,QAAMC,QAAQ,GAAG,CAAC;AACdT,IAAAA,IAAI,EAAE,SADQ;AAEdC,IAAAA,OAAO,EAAE,UAFK;AAGdC,IAAAA,IAAI,EAAE;AAHQ,GAAD,EAKjB;AACIF,IAAAA,IAAI,EAAE,SADV;AAEIC,IAAAA,OAAO,EAAE,UAFb;AAGIC,IAAAA,IAAI,EAAE;AAHV,GALiB,CAAjB;AAWAX,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,WAAW,CAACH,cAAc,CAACM,QAAD,CAAf,CAAX;AACH,GAFQ,EAEN,EAFM,CAAT;AAKA,sBACI;AAAA,2BACI,QAAC,UAAD;AAAY,MAAA,SAAS,EAAEd;AAAvB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAvDeD,Q;;KAAAA,Q;AAuDf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Forecaster } from './forecaster';\nimport { LocationFrame } from './locationFrame';\n\nexport function Location() {\n\n    const [locations, setLocations] = useState([{\n        location: []\n    }]);\n\n    const [location, setLocation] = useState([{\n        id: '', //Used as a key to store a location in locations array\n        name: '',\n        weather: '',\n        temp: ''\n    }]);\n\n    const createLocation = (dataSource) => {\n        setLocation([{\n            id: generateId(),\n            name: dataSource.name,\n            weather: dataSource.weather,\n            temp: dataSource.temp\n        }])\n    }\n\n    const addLocation = (location) => {\n        setLocations((prev) => {\n            return [...prev, location];\n        })\n    }\n\n    //Ikke en elegant løsning men enkel\n    let idCounter = 0;\n    const generateId = () => {\n        return idCounter = idCounter + 1;\n    }\n\n    const database = [{\n        name: 'Paradis',\n        weather: 'cloudLow',\n        temp: '15'\n    },\n    {\n        name: 'Sandsli',\n        weather: 'cloudMid',\n        temp: '18'\n    }]\n\n    useEffect(() => {\n        addLocation(createLocation(database));\n    }, []);\n\n\n    return (\n        <div>\n            <Forecaster locations={locations}/>\n        </div>\n    )\n};"]},"metadata":{},"sourceType":"module"}