{"ast":null,"code":"var _jsxFileName = \"/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/locationManager.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport weatherLogo from './resources/WeatherIcons/logo.png';\nimport { Arrow } from './arrow/arrow';\nimport '../App.css';\nimport { AddLocationForm } from './addLocationForm';\nimport { LocationFrame } from './locationFrame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function LocationManager() {\n  _s();\n\n  const [locations, setLocations] = useState([{\n    id: generateId(),\n    name: '',\n    date: '',\n    weather: '',\n    temp: '',\n    wind: ''\n  }]); //Not an elegant solution, but it works\n\n  let idCounter = 0;\n\n  const generateId = () => {\n    return idCounter = idCounter + 1;\n  }; //Metod used to change the state of locations and add a new location to the array\n\n\n  const addLocation = newLocation => {\n    setLocations(locations => [newLocation, ...locations]);\n  }; //Method used to change the state of locations and remove a given location from the array based on id\n\n\n  const removeLocation = locationIdToRemove => {\n    setLocations(locations => {\n      locations.filter(location => location.id !== locationIdToRemove);\n    });\n  }; //Method used to check wether a location name has already been added to the list of locations\n\n\n  const checkIfPresent = locationName => {\n    locations.filter(locations => locations.name === locationName);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: weatherLogo,\n        alt: \"logo\",\n        className: \"App-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"App-title\",\n        children: \"Forecaster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Arrow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddLocationForm, {\n      generateId: generateId,\n      addLocation: addLocation,\n      removeLocation: removeLocation,\n      checkIfPresent: checkIfPresent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), locations.map(location => {\n      return /*#__PURE__*/_jsxDEV(LocationFrame, {\n        id: location.id,\n        name: location.name,\n        date: location.date,\n        weather: location.weather,\n        temp: location.temp,\n        wind: location.wind\n      }, location, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LocationManager, \"3fjfI1jr3PEf4E5rXga7xwUpzEw=\");\n\n_c = LocationManager;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationManager\");","map":{"version":3,"sources":["/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/locationManager.js"],"names":["React","useState","useEffect","weatherLogo","Arrow","AddLocationForm","LocationFrame","LocationManager","locations","setLocations","id","generateId","name","date","weather","temp","wind","idCounter","addLocation","newLocation","removeLocation","locationIdToRemove","filter","location","checkIfPresent","locationName","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAO,YAAP;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;;AAEA,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAE9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CACvC;AACIS,IAAAA,EAAE,EAAEC,UAAU,EADlB;AAEIC,IAAAA,IAAI,EAAE,EAFV;AAGIC,IAAAA,IAAI,EAAE,EAHV;AAIIC,IAAAA,OAAO,EAAE,EAJb;AAKIC,IAAAA,IAAI,EAAE,EALV;AAMIC,IAAAA,IAAI,EAAE;AANV,GADuC,CAAD,CAA1C,CAF8B,CAa9B;;AACA,MAAIC,SAAS,GAAG,CAAhB;;AACA,QAAMN,UAAU,GAAG,MAAM;AACrB,WAAOM,SAAS,GAAGA,SAAS,GAAG,CAA/B;AACH,GAFD,CAf8B,CAmB9B;;;AACA,QAAMC,WAAW,GAAIC,WAAD,IAAiB;AACjCV,IAAAA,YAAY,CAAED,SAAD,IAAe,CAACW,WAAD,EAAc,GAAGX,SAAjB,CAAhB,CAAZ;AACH,GAFD,CApB8B,CAwB9B;;;AACA,QAAMY,cAAc,GAAIC,kBAAD,IAAwB;AAC3CZ,IAAAA,YAAY,CAAED,SAAD,IAAe;AACxBA,MAAAA,SAAS,CAACc,MAAV,CAAkBC,QAAQ,IAAIA,QAAQ,CAACb,EAAT,KAAgBW,kBAA9C;AACH,KAFW,CAAZ;AAGH,GAJD,CAzB8B,CA+B9B;;;AACA,QAAMG,cAAc,GAAIC,YAAD,IAAkB;AACrCjB,IAAAA,SAAS,CAACc,MAAV,CAAkBd,SAAD,IAAeA,SAAS,CAACI,IAAV,KAAmBa,YAAnD;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACI;AAAK,QAAA,GAAG,EAAEtB,WAAV;AAAuB,QAAA,GAAG,EAAC,MAA3B;AAAkC,QAAA,SAAS,EAAC;AAA5C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI,QAAC,eAAD;AAAoB,MAAA,UAAU,EAAEQ,UAAhC;AACoB,MAAA,WAAW,EAAEO,WADjC;AAEoB,MAAA,cAAc,EAAEE,cAFpC;AAGoB,MAAA,cAAc,EAAEI;AAHpC;AAAA;AAAA;AAAA;AAAA,YARJ,EAaKhB,SAAS,CAACkB,GAAV,CAAeH,QAAD,IAAc;AACzB,0BACI,QAAC,aAAD;AACgB,QAAA,EAAE,EAAEA,QAAQ,CAACb,EAD7B;AAEgB,QAAA,IAAI,EAAEa,QAAQ,CAACX,IAF/B;AAGgB,QAAA,IAAI,EAAEW,QAAQ,CAACV,IAH/B;AAIgB,QAAA,OAAO,EAAEU,QAAQ,CAACT,OAJlC;AAKgB,QAAA,IAAI,EAAES,QAAQ,CAACR,IAL/B;AAMgB,QAAA,IAAI,EAAEQ,QAAQ,CAACP;AAN/B,SAAqBO,QAArB;AAAA;AAAA;AAAA;AAAA,cADJ;AAUH,KAXA,CAbL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH;;GAhEehB,e;;KAAAA,e;AAgEf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport weatherLogo from './resources/WeatherIcons/logo.png';\nimport { Arrow } from './arrow/arrow';\nimport '../App.css';\nimport { AddLocationForm } from './addLocationForm';\nimport { LocationFrame } from './locationFrame';\n\nexport function LocationManager() {\n\n    const [locations, setLocations] = useState([\n        {\n            id: generateId(),\n            name: '',\n            date: '',\n            weather: '',\n            temp: '',\n            wind: ''\n        }\n    ]);\n\n    //Not an elegant solution, but it works\n    let idCounter = 0;\n    const generateId = () => {\n        return idCounter = idCounter + 1;\n    }\n\n    //Metod used to change the state of locations and add a new location to the array\n    const addLocation = (newLocation) => {\n        setLocations((locations) => [newLocation, ...locations]);\n    };\n\n    //Method used to change the state of locations and remove a given location from the array based on id\n    const removeLocation = (locationIdToRemove) => {\n        setLocations((locations) => {\n            locations.filter((location => location.id !== locationIdToRemove))\n        });\n    };\n\n    //Method used to check wether a location name has already been added to the list of locations\n    const checkIfPresent = (locationName) => {\n        locations.filter((locations) => locations.name === locationName)\n    }\n\n    return (\n        <div className='App'>\n            <div className='App-header'>\n                <img src={weatherLogo} alt=\"logo\" className='App-logo' />\n                <br/>\n                <h1 className='App-title'>Forecaster</h1>\n                <br/>\n            </div>\n            <Arrow />\n            <AddLocationForm    generateId={generateId} \n                                addLocation={addLocation} \n                                removeLocation={removeLocation} \n                                checkIfPresent={checkIfPresent} />\n            \n            {locations.map((location) => {\n                return (\n                    <LocationFrame  key={location} \n                                    id={location.id}\n                                    name={location.name}\n                                    date={location.date}\n                                    weather={location.weather}\n                                    temp={location.temp}\n                                    wind={location.wind}\n                                    />\n                )\n            })}\n        </div>\n    )\n};"]},"metadata":{},"sourceType":"module"}