{"ast":null,"code":"var _jsxFileName = \"/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/location.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { LocationFrame } from './locationFrame';\nimport weatherLogo from './resources/WeatherIcons/logo.png';\nimport { Arrow } from './arrow/arrow';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Location() {\n  _s();\n\n  const [locations, setLocations] = useState([{\n    location: [{\n      id: '',\n      name: 'Placeholder',\n      weather: 'sun',\n      temp: '18'\n    }]\n  }]);\n  const [location, setLocation] = useState([{\n    id: '0',\n    //Used as a key to store a location in locations array\n    name: 'Placeholder',\n    weather: 'sun',\n    temp: '18'\n  }]);\n\n  const createLocation = dataSource => {\n    setLocation([{\n      id: generateId(),\n      name: dataSource.name,\n      weather: dataSource.weather,\n      temp: dataSource.temp\n    }]);\n  };\n\n  const addLocation = location => {\n    setLocations(prev => {\n      return [...prev, location];\n    });\n  }; //Ikke en elegant løsning men enkel\n\n\n  let idCounter = 0;\n\n  const generateId = () => {\n    return idCounter = idCounter + 1;\n  };\n\n  const database = [{\n    name: 'Paradis',\n    weather: 'cloudLow',\n    temp: '15'\n  }, {\n    name: 'Sandsli',\n    weather: 'cloudMid',\n    temp: '18'\n  }];\n  useEffect(() => {\n    addLocation(createLocation(database));\n  });\n\n  const handleChange = event => {\n    event.prevntDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: weatherLogo,\n        alt: \"logo\",\n        className: \"App-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"App-title\",\n        children: \"Forecaster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Arrow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: handleChange,\n      type: \"text\",\n      placeholder: \"Enter a location...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), database.map(location => {\n      return /*#__PURE__*/_jsxDEV(LocationFrame, {\n        id: location.id,\n        name: location.name,\n        weather: location.weather,\n        temp: location.temp\n      }, location, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 28\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Location, \"u/BLMcqeg/d6NP+xbdCZCVOU08I=\");\n\n_c = Location;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/location.js"],"names":["React","useState","useEffect","LocationFrame","weatherLogo","Arrow","Location","locations","setLocations","location","id","name","weather","temp","setLocation","createLocation","dataSource","generateId","addLocation","prev","idCounter","database","handleChange","event","prevntDefault","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { LocationFrame } from './locationFrame';\nimport weatherLogo from './resources/WeatherIcons/logo.png';\nimport { Arrow } from './arrow/arrow';\nimport '../App.css';\n\nexport function Location() {\n\n    const [locations, setLocations] = useState([{\n        location: [{\n            id: '',\n            name: 'Placeholder',\n            weather: 'sun',\n            temp: '18'\n        }]\n    }]);\n\n    const [location, setLocation] = useState([{\n        id: '0', //Used as a key to store a location in locations array\n        name: 'Placeholder',\n        weather: 'sun',\n        temp: '18'\n    }]);\n\n    const createLocation = (dataSource) => {\n        setLocation([{\n            id: generateId(),\n            name: dataSource.name,\n            weather: dataSource.weather,\n            temp: dataSource.temp\n        }])\n    }\n\n    const addLocation = (location) => {\n        setLocations((prev) => {\n            return [...prev, location];\n        })\n    }\n\n    //Ikke en elegant løsning men enkel\n    let idCounter = 0;\n    const generateId = () => {\n        return idCounter = idCounter + 1;\n    }\n\n    const database = [{\n        name: 'Paradis',\n        weather: 'cloudLow',\n        temp: '15'\n    },\n    {\n        name: 'Sandsli',\n        weather: 'cloudMid',\n        temp: '18'\n    }]\n\n    useEffect(() => {\n        addLocation(createLocation(database));\n    }, );\n    \n    const handleChange = (event) => {\n        event.prevntDefault();\n    }\n\n    return (\n        <div className='App'>\n            <div className='App-header'>\n                <img src={weatherLogo} alt=\"logo\" className='App-logo' />\n                <br/>\n                <h1 className='App-title'>Forecaster</h1>\n                <br/>\n            </div>\n            <Arrow />\n            <input onChange={handleChange} type='text' placeholder='Enter a location...'></input>\n            {\n                database.map((location) => {\n                    return <LocationFrame key={location} id={location.id} name={location.name} weather={location.weather} temp={location.temp}/>\n                })\n            }\n        </div>\n    )\n};"]},"metadata":{},"sourceType":"module"}