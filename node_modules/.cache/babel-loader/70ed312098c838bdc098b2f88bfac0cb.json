{"ast":null,"code":"var _jsxFileName = \"/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/addLocationForm.js\",\n    _s = $RefreshSig$();\n\n//Koden er basert p책: https://blog.logrocket.com/build-react-autocomplete-component/\nimport React, { useState } from 'react';\nimport { database } from './mockBackend/database';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AddLocationForm(props) {\n  _s();\n\n  const [text, setText] = useState('');\n  const datasource = database; //Metod used to change the text state to the live input from the user\n\n  const handleInputChange = event => {\n    setText(event.target.value);\n  }; //Method used to search the given database for a given location name\n\n\n  const searchDatasource = (datasource, locationName) => {\n    datasource.map(locations => {\n      return locations.filter(location => location.name === locationName);\n    });\n  }; //TODO: Implementer en sjekk som unng책r at vi kan legge til en lokasjon to ganger.\n  //Bruk props.checkIfPresent funksjon fra locationManager\n\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (text.length > 0) {\n      const locationToAdd = searchDatasource(datasource, text);\n      const location = {\n        id: props.generateId(),\n        name: locationToAdd.name,\n        date: locationToAdd.date,\n        weather: locationToAdd.weather,\n        temp: locationToAdd.temp,\n        wind: locationToAdd.wind\n      };\n      props.addLocation(location);\n      setText('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: text,\n      onChange: handleInputChange,\n      placeholder: \"Enter a location...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddLocationForm, \"M8VhbSOru85VOsk7T2j5DvKRp+M=\");\n\n_c = AddLocationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLocationForm\");","map":{"version":3,"sources":["/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/addLocationForm.js"],"names":["React","useState","database","AddLocationForm","props","text","setText","datasource","handleInputChange","event","target","value","searchDatasource","locationName","map","locations","filter","location","name","handleSubmit","preventDefault","length","locationToAdd","id","generateId","date","weather","temp","wind","addLocation"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,wBAAzB;;AAEA,OAAO,SAASC,eAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AAEpC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMM,UAAU,GAAGL,QAAnB,CAHoC,CAKpC;;AACA,QAAMM,iBAAiB,GAAIC,KAAD,IAAW;AACjCH,IAAAA,OAAO,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACH,GAFD,CANoC,CAUpC;;;AACA,QAAMC,gBAAgB,GAAG,CAACL,UAAD,EAAaM,YAAb,KAA8B;AACnDN,IAAAA,UAAU,CAACO,GAAX,CAAgBC,SAAD,IAAe;AAC1B,aACIA,SAAS,CAACC,MAAV,CAAkBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,KAAkBL,YAAjD,CADJ;AAGH,KAJD;AAKH,GAND,CAXoC,CAoBpC;AACA;;;AACA,QAAMM,YAAY,GAAIV,KAAD,IAAW;AAC5BA,IAAAA,KAAK,CAACW,cAAN;;AAEA,QAAGf,IAAI,CAACgB,MAAL,GAAc,CAAjB,EAAoB;AAEhB,YAAMC,aAAa,GAAGV,gBAAgB,CAACL,UAAD,EAAaF,IAAb,CAAtC;AAEA,YAAMY,QAAQ,GAAG;AACbM,QAAAA,EAAE,EAAEnB,KAAK,CAACoB,UAAN,EADS;AAEbN,QAAAA,IAAI,EAAEI,aAAa,CAACJ,IAFP;AAGbO,QAAAA,IAAI,EAAEH,aAAa,CAACG,IAHP;AAIbC,QAAAA,OAAO,EAAEJ,aAAa,CAACI,OAJV;AAKbC,QAAAA,IAAI,EAAEL,aAAa,CAACK,IALP;AAMbC,QAAAA,IAAI,EAAEN,aAAa,CAACM;AANP,OAAjB;AASAxB,MAAAA,KAAK,CAACyB,WAAN,CAAkBZ,QAAlB;AACAX,MAAAA,OAAO,CAAC,EAAD,CAAP;AACH;AACJ,GAnBD;;AAqBA,sBACI;AAAM,IAAA,QAAQ,EAAEa,YAAhB;AAAA,4BACI;AAAQ,MAAA,IAAI,EAAC,MAAb;AACQ,MAAA,KAAK,EAAEd,IADf;AAEQ,MAAA,QAAQ,EAAEG,iBAFlB;AAGQ,MAAA,WAAW,EAAC;AAHpB;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GApDeL,e;;KAAAA,e","sourcesContent":["//Koden er basert p책: https://blog.logrocket.com/build-react-autocomplete-component/\n\nimport React, { useState } from 'react';\nimport { database } from './mockBackend/database';\n\nexport function AddLocationForm (props) {\n\n    const [text, setText] = useState('');\n    const datasource = database;\n\n    //Metod used to change the text state to the live input from the user\n    const handleInputChange = (event) => {\n        setText(event.target.value);\n    }\n\n    //Method used to search the given database for a given location name\n    const searchDatasource = (datasource, locationName) => {\n        datasource.map((locations) => {\n            return (\n                locations.filter((location) => location.name === locationName)\n            )\n        })\n    }\n\n\n    //TODO: Implementer en sjekk som unng책r at vi kan legge til en lokasjon to ganger.\n    //Bruk props.checkIfPresent funksjon fra locationManager\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        \n        if(text.length > 0) {\n\n            const locationToAdd = searchDatasource(datasource, text);\n\n            const location = {\n                id: props.generateId(),\n                name: locationToAdd.name,\n                date: locationToAdd.date,\n                weather: locationToAdd.weather,\n                temp: locationToAdd.temp,\n                wind: locationToAdd.wind\n            }\n\n            props.addLocation(location);\n            setText('');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input  type='text' \n                    value={text} \n                    onChange={handleInputChange} \n                    placeholder='Enter a location...' />\n            <input type=\"submit\" value=\"Add\" />\n        </form>\n    )\n}"]},"metadata":{},"sourceType":"module"}