{"ast":null,"code":"var _jsxFileName = \"/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/location.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Location(props) {\n  _s();\n\n  ;\n  const [location, setLocation] = useState([{\n    id: '0',\n    name: 'Placeholder',\n    date: '01.02',\n    weather: 'sun',\n    temp: '18',\n    wind: '0'\n  }]); //Ikke en elegant løsning men enkel\n\n  let idCounter = 0;\n\n  const generateId = () => {\n    return idCounter = idCounter + 1;\n  };\n\n  const createLocation = dataSource => {\n    setLocation([{\n      id: generateId(),\n      name: dataSource.name,\n      date: dataSource.date,\n      weather: dataSource.weather,\n      temp: dataSource.temp,\n      wind: dataSource.wind\n    }]);\n  };\n\n  const addLocation = locationName => {\n    const newLocation = database.filter(location => {\n      return location.name === locationName;\n    });\n    setLocations(prev => {\n      return [...prev, newLocation];\n    });\n  };\n\n  const removeLocation = locationID => {\n    setLocations(locations => {\n      locations.filter(location => location.id !== locationID);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\xA8\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Location, \"zhW0xe3XuTU/JKa6duyAv37cIYU=\");\n\n_c = Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/location.js"],"names":["React","useState","Location","props","location","setLocation","id","name","date","weather","temp","wind","idCounter","generateId","createLocation","dataSource","addLocation","locationName","newLocation","database","filter","setLocations","prev","removeLocation","locationID","locations"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAEtB;AAEC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,CAAC;AACtCK,IAAAA,EAAE,EAAE,GADkC;AAEtCC,IAAAA,IAAI,EAAE,aAFgC;AAGtCC,IAAAA,IAAI,EAAE,OAHgC;AAItCC,IAAAA,OAAO,EAAE,KAJ6B;AAKtCC,IAAAA,IAAI,EAAE,IALgC;AAMtCC,IAAAA,IAAI,EAAE;AANgC,GAAD,CAAD,CAAxC,CAJqB,CAarB;;AACA,MAAIC,SAAS,GAAG,CAAhB;;AACA,QAAMC,UAAU,GAAG,MAAM;AACrB,WAAOD,SAAS,GAAGA,SAAS,GAAG,CAA/B;AACH,GAFD;;AAIA,QAAME,cAAc,GAAIC,UAAD,IAAgB;AACnCV,IAAAA,WAAW,CAAC,CAAC;AACTC,MAAAA,EAAE,EAAEO,UAAU,EADL;AAETN,MAAAA,IAAI,EAAEQ,UAAU,CAACR,IAFR;AAGTC,MAAAA,IAAI,EAAEO,UAAU,CAACP,IAHR;AAITC,MAAAA,OAAO,EAAEM,UAAU,CAACN,OAJX;AAKTC,MAAAA,IAAI,EAAEK,UAAU,CAACL,IALR;AAMTC,MAAAA,IAAI,EAAEI,UAAU,CAACJ;AANR,KAAD,CAAD,CAAX;AAQH,GATD;;AAWA,QAAMK,WAAW,GAAIC,YAAD,IAAkB;AAElC,UAAMC,WAAW,GAAGC,QAAQ,CAACC,MAAT,CAAiBhB,QAAD,IAAc;AAC9C,aAAOA,QAAQ,CAACG,IAAT,KAAkBU,YAAzB;AACH,KAFmB,CAApB;AAIAI,IAAAA,YAAY,CAAEC,IAAD,IAAU;AACnB,aAAO,CAAC,GAAGA,IAAJ,EAAUJ,WAAV,CAAP;AACH,KAFW,CAAZ;AAGH,GATD;;AAYA,QAAMK,cAAc,GAAIC,UAAD,IAAgB;AACnCH,IAAAA,YAAY,CAAEI,SAAD,IAAe;AACxBA,MAAAA,SAAS,CAACL,MAAV,CAAkBhB,QAAD,IAAcA,QAAQ,CAACE,EAAT,KAAgBkB,UAA/C;AACH,KAFW,CAAZ;AAGH,GAJD;;AAMA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GArDQtB,Q;;KAAAA,Q","sourcesContent":["import React, { useState } from 'react';\n\nfunction Location(props) {\n\n   ;\n\n    const [location, setLocation] = useState([{\n        id: '0',\n        name: 'Placeholder',\n        date: '01.02',\n        weather: 'sun',\n        temp: '18',\n        wind: '0'\n    }])\n\n    //Ikke en elegant løsning men enkel\n    let idCounter = 0;\n    const generateId = () => {\n        return idCounter = idCounter + 1;\n    }\n\n    const createLocation = (dataSource) => {\n        setLocation([{\n            id: generateId(),\n            name: dataSource.name,\n            date: dataSource.date,\n            weather: dataSource.weather,\n            temp: dataSource.temp,\n            wind: dataSource.wind\n        }])\n    }\n\n    const addLocation = (locationName) => {\n        \n        const newLocation = database.filter((location) => {\n            return location.name === locationName;\n        });\n        \n        setLocations((prev) => {\n            return [...prev, newLocation];\n        })\n    }\n\n\n    const removeLocation = (locationID) => {\n        setLocations((locations) => {\n            locations.filter((location) => location.id !== locationID)\n        })\n    }\n\n    return (\n        <div>\n            ¨\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}