{"ast":null,"code":"var _jsxFileName = \"/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/locationManager.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport weatherLogo from './resources/WeatherIcons/logo.png';\nimport { Arrow } from './arrow/arrow';\nimport '../App.css';\nimport { AddLocationForm } from './addLocationForm';\nimport { LocationFrame } from './locationFrame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function LocationManager() {\n  _s();\n\n  //Not an elegant solution, but it works\n  let idCounter = 0;\n\n  const generateId = () => {\n    return idCounter = idCounter + 1;\n  };\n\n  const [locations, setLocations] = useState([{\n    id: generateId(),\n    name: 'Bergen',\n    date: '01.01',\n    weather: 'sun',\n    temp: '10',\n    wind: '3'\n  }]); //Metod used to change the state of locations and add a new location to the array\n\n  const addLocation = newLocation => {\n    setLocations(locations => [newLocation, ...locations]);\n  }; //Method used to change the state of locations and remove a given location from the array based on id\n\n\n  const removeLocation = locationIdToRemove => {\n    const newListOfLoactions = locations.filter(location => location.id !== locationIdToRemove);\n    setLocations(newListOfLoactions);\n  }; //Method used to check if a location name has already been added to the list of locations\n\n\n  const checkIfPresent = locationName => {\n    locations.find(location => location.name === locationName);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: weatherLogo,\n        alt: \"logo\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Forecaster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Arrow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: 150\n      },\n      children: [/*#__PURE__*/_jsxDEV(AddLocationForm, {\n        generateId: generateId,\n        addLocation: addLocation,\n        checkIfPresent: checkIfPresent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), locations.map(location => {\n        return /*#__PURE__*/_jsxDEV(LocationFrame, {\n          location: location,\n          removeLocation: removeLocation\n        }, location.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LocationManager, \"DY73ejquiNgAVWaNvyk8BouwRo0=\");\n\n_c = LocationManager;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationManager\");","map":{"version":3,"sources":["/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/locationManager.js"],"names":["React","useState","useEffect","weatherLogo","Arrow","AddLocationForm","LocationFrame","LocationManager","idCounter","generateId","locations","setLocations","id","name","date","weather","temp","wind","addLocation","newLocation","removeLocation","locationIdToRemove","newListOfLoactions","filter","location","checkIfPresent","locationName","find","paddingBottom","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAO,YAAP;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;;AAEA,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAE9B;AACA,MAAIC,SAAS,GAAG,CAAhB;;AACA,QAAMC,UAAU,GAAG,MAAM;AACrB,WAAOD,SAAS,GAAGA,SAAS,GAAG,CAA/B;AACH,GAFD;;AAIA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,CACvC;AACIW,IAAAA,EAAE,EAAEH,UAAU,EADlB;AAEII,IAAAA,IAAI,EAAE,QAFV;AAGIC,IAAAA,IAAI,EAAE,OAHV;AAIIC,IAAAA,OAAO,EAAE,KAJb;AAKIC,IAAAA,IAAI,EAAE,IALV;AAMIC,IAAAA,IAAI,EAAE;AANV,GADuC,CAAD,CAA1C,CAR8B,CAoB9B;;AACA,QAAMC,WAAW,GAAIC,WAAD,IAAiB;AACjCR,IAAAA,YAAY,CAAED,SAAD,IAAe,CAACS,WAAD,EAAc,GAAGT,SAAjB,CAAhB,CAAZ;AACH,GAFD,CArB8B,CAyB9B;;;AACA,QAAMU,cAAc,GAAIC,kBAAD,IAAwB;AAC3C,UAAMC,kBAAkB,GAAGZ,SAAS,CAACa,MAAV,CAAiBC,QAAQ,IAAIA,QAAQ,CAACZ,EAAT,KAAgBS,kBAA7C,CAA3B;AACAV,IAAAA,YAAY,CAACW,kBAAD,CAAZ;AACH,GAHD,CA1B8B,CA+B9B;;;AACA,QAAMG,cAAc,GAAIC,YAAD,IAAkB;AACrChB,IAAAA,SAAS,CAACiB,IAAV,CAAeH,QAAQ,IAAIA,QAAQ,CAACX,IAAT,KAAkBa,YAA7C;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI;AAAK,QAAA,GAAG,EAAEvB,WAAV;AAAuB,QAAA,GAAG,EAAC,MAA3B;AAAkC,QAAA,SAAS,EAAC;AAA5C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAI,QAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAK,MAAA,KAAK,EAAE;AAACyB,QAAAA,aAAa,EAAE;AAAhB,OAAZ;AAAA,8BACI,QAAC,eAAD;AAAoB,QAAA,UAAU,EAAEnB,UAAhC;AACoB,QAAA,WAAW,EAAES,WADjC;AAEoB,QAAA,cAAc,EAAEO;AAFpC;AAAA;AAAA;AAAA;AAAA,cADJ,EAIKf,SAAS,CAACmB,GAAV,CAAeL,QAAD,IAAc;AACzB,4BACI,QAAC,aAAD;AACgB,UAAA,QAAQ,EAAEA,QAD1B;AAEgB,UAAA,cAAc,EAAEJ;AAFhC,WAAqBI,QAAQ,CAACX,IAA9B;AAAA;AAAA;AAAA;AAAA,gBADJ;AAMH,OAPA,CAJL;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH;;GA5DeN,e;;KAAAA,e;AA4Df","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport weatherLogo from './resources/WeatherIcons/logo.png';\nimport { Arrow } from './arrow/arrow';\nimport '../App.css';\nimport { AddLocationForm } from './addLocationForm';\nimport { LocationFrame } from './locationFrame';\n\nexport function LocationManager() {\n\n    //Not an elegant solution, but it works\n    let idCounter = 0;\n    const generateId = () => {\n        return idCounter = idCounter + 1;\n    }\n\n    const [locations, setLocations] = useState([\n        {\n            id: generateId(),\n            name: 'Bergen',\n            date: '01.01',\n            weather: 'sun',\n            temp: '10',\n            wind: '3'\n        }\n    ]);\n\n\n    //Metod used to change the state of locations and add a new location to the array\n    const addLocation = (newLocation) => {\n        setLocations((locations) => [newLocation, ...locations]);\n    };\n\n    //Method used to change the state of locations and remove a given location from the array based on id\n    const removeLocation = (locationIdToRemove) => {\n        const newListOfLoactions = locations.filter(location => location.id !== locationIdToRemove);\n        setLocations(newListOfLoactions);\n    };\n\n    //Method used to check if a location name has already been added to the list of locations\n    const checkIfPresent = (locationName) => {\n        locations.find(location => location.name === locationName)\n    }\n\n    return (\n        <div>\n            <div className='header'>\n                <img src={weatherLogo} alt=\"logo\" className='logo' />\n                <br/>\n                <h1 className='title'>Forecaster</h1>\n                <br/>\n            </div>\n            <Arrow />\n            <div style={{paddingBottom: 150}}>\n                <AddLocationForm    generateId={generateId} \n                                    addLocation={addLocation} \n                                    checkIfPresent={checkIfPresent} />\n                {locations.map((location) => {\n                    return (\n                        <LocationFrame  key={location.name}\n                                        location={location}\n                                        removeLocation={removeLocation}\n                                    />\n                    )\n                })}\n            </div>\n        </div>\n    )\n};"]},"metadata":{},"sourceType":"module"}