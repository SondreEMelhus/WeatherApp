{"ast":null,"code":"var _jsxFileName = \"/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/location.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { LocationFrame } from './locationFrame';\nimport weatherLogo from './resources/WeatherIcons/logo.png';\nimport { Arrow } from './arrow/arrow';\nimport '../App.css';\nimport { database } from './mockBackend/database';\nimport { AutoComplete } from './autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Location() {\n  _s();\n\n  const [locations, setLocations] = useState([{\n    location: []\n  }]);\n  const [location, setLocation] = useState([{\n    id: '0',\n    //Used as a key to store a location in locations array\n    name: 'Placeholder',\n    date: '01.02',\n    weather: 'sun',\n    temp: '18',\n    wind: '0'\n  }]);\n  const [text, setText] = useState('');\n\n  const createLocation = dataSource => {\n    setLocation([{\n      id: generateId(),\n      name: dataSource.name,\n      date: dataSource.date,\n      weather: dataSource.weather,\n      temp: dataSource.temp,\n      wind: dataSource.wind\n    }]);\n  };\n\n  const addLocation = location => {\n    setLocations(prev => {\n      return [...prev, location];\n    });\n  };\n\n  const removeLocation = locationID => {\n    setLocations(locations => {\n      locations.filter(location => location.id !== locationID);\n    });\n  }; //Ikke en elegant løsning men enkel\n\n\n  let idCounter = 0;\n\n  const generateId = () => {\n    return idCounter = idCounter + 1;\n  };\n\n  useEffect(() => {\n    addLocation(createLocation(database));\n  }, []);\n\n  const handleChange = event => {\n    setText(event.target.value);\n    const newArray = locationDatabase.filter(loc => {\n      return loc.indexOf(event.target.value) !== -1;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: weatherLogo,\n        alt: \"logo\",\n        className: \"App-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"App-title\",\n        children: \"Forecaster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Arrow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AutoComplete, {\n      addLocation: addLocation,\n      locations: database.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), database.map(location => {\n      return /*#__PURE__*/_jsxDEV(LocationFrame, {\n        id: location.id,\n        name: location.name,\n        weather: location.weather,\n        temp: location.temp,\n        wind: location.wind\n      }, location, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 28\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Location, \"5b+CNJnURbX9T6hrJQtTQrXqx1U=\");\n\n_c = Location;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/location.js"],"names":["React","useState","useEffect","LocationFrame","weatherLogo","Arrow","database","AutoComplete","Location","locations","setLocations","location","setLocation","id","name","date","weather","temp","wind","text","setText","createLocation","dataSource","generateId","addLocation","prev","removeLocation","locationID","filter","idCounter","handleChange","event","target","value","newArray","locationDatabase","loc","indexOf","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { LocationFrame } from './locationFrame';\nimport weatherLogo from './resources/WeatherIcons/logo.png';\nimport { Arrow } from './arrow/arrow';\nimport '../App.css';\nimport { database } from './mockBackend/database';\nimport { AutoComplete } from './autocomplete';\n\nexport function Location() {\n\n    const [locations, setLocations] = useState([{\n        location: []\n    }]);\n\n    const [location, setLocation] = useState([{\n        id: '0', //Used as a key to store a location in locations array\n        name: 'Placeholder',\n        date: '01.02',\n        weather: 'sun',\n        temp: '18',\n        wind: '0'\n    }]);\n\n    const [text, setText]  = useState('');\n    \n\n    const createLocation = (dataSource) => {\n        setLocation([{\n            id: generateId(),\n            name: dataSource.name,\n            date: dataSource.date,\n            weather: dataSource.weather,\n            temp: dataSource.temp,\n            wind: dataSource.wind\n        }])\n    }\n\n    const addLocation = (location) => {\n        setLocations((prev) => {\n            return [...prev, location];\n        })\n    }\n\n\n    const removeLocation = (locationID) => {\n        setLocations((locations) => {\n            locations.filter((location) => location.id !== locationID)\n        })\n    }\n\n\n    //Ikke en elegant løsning men enkel\n    let idCounter = 0;\n    const generateId = () => {\n        return idCounter = idCounter + 1;\n    }\n\n\n    useEffect(() => {\n        addLocation(createLocation(database));\n    }, []);\n    \n\n    const handleChange = (event) => {\n        setText(event.target.value);\n\n        const newArray = locationDatabase.filter((loc) => {\n            return loc.indexOf(event.target.value) !== -1\n        });\n    }\n\n\n    return (\n        <div className='App'>\n            <div className='App-header'>\n                <img src={weatherLogo} alt=\"logo\" className='App-logo' />\n                <br/>\n                <h1 className='App-title'>Forecaster</h1>\n                <br/>\n            </div>\n            <Arrow />\n            <AutoComplete addLocation={addLocation} locations={database.name}/>\n            {\n                database.map((location) => {\n                    return <LocationFrame key={location} id={location.id} name={location.name} weather={location.weather} temp={location.temp} wind={location.wind}/>\n                })\n            }\n        </div>\n    )\n};"]},"metadata":{},"sourceType":"module"}