{"ast":null,"code":"var _jsxFileName = \"/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/location.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { LocationFrame } from './locationFrame';\nimport { database } from './mockBackend/database';\nimport { SearchForLocation } from './searchForLocation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Location(props) {\n  _s();\n\n  const [location, setLocation] = useState([{\n    id: '0',\n    name: 'Placeholder',\n    date: '01.02',\n    weather: 'sun',\n    temp: '18',\n    wind: '0'\n  }]);\n  const locationName = props.text;\n  const datasource = database; //Ikke en elegant løsning men enkel\n\n  let idCounter = 0;\n\n  const generateId = () => {\n    return idCounter = idCounter + 1;\n  };\n\n  const searchDatabase = datasource => {\n    const locationData = datasource.filter(location => {\n      return location.name === locationName;\n    });\n\n    if (locationData !== null) {\n      setLocation([{\n        id: generateId(),\n        name: locationData.name,\n        date: locationData.date,\n        weather: locationData.weather,\n        temp: locationData.temp,\n        wind: locationData.wind\n      }]);\n    } else {\n      alert('There exists no location with that name.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"searchDatabase\", {\n      datasource: database\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LocationFrame, {\n      id: location.id,\n      name: location.name,\n      weather: location.weather,\n      temp: location.temp,\n      wind: location.wind\n    }, location, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Location, \"zhW0xe3XuTU/JKa6duyAv37cIYU=\");\n\n_c = Location;\n\nvar _c;\n\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"sources":["/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/location.js"],"names":["React","useState","LocationFrame","database","SearchForLocation","Location","props","location","setLocation","id","name","date","weather","temp","wind","locationName","text","datasource","idCounter","generateId","searchDatabase","locationData","filter","alert"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAE5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,CAAC;AACtCQ,IAAAA,EAAE,EAAE,GADkC;AAEtCC,IAAAA,IAAI,EAAE,aAFgC;AAGtCC,IAAAA,IAAI,EAAE,OAHgC;AAItCC,IAAAA,OAAO,EAAE,KAJ6B;AAKtCC,IAAAA,IAAI,EAAE,IALgC;AAMtCC,IAAAA,IAAI,EAAE;AANgC,GAAD,CAAD,CAAxC;AASA,QAAMC,YAAY,GAAGT,KAAK,CAACU,IAA3B;AACA,QAAMC,UAAU,GAAGd,QAAnB,CAZ4B,CAc5B;;AACA,MAAIe,SAAS,GAAG,CAAhB;;AACA,QAAMC,UAAU,GAAG,MAAM;AACrB,WAAOD,SAAS,GAAGA,SAAS,GAAG,CAA/B;AACH,GAFD;;AAIA,QAAME,cAAc,GAAIH,UAAD,IAAgB;AAEnC,UAAMI,YAAY,GAAGJ,UAAU,CAACK,MAAX,CAAmBf,QAAD,IAAc;AACjD,aAAOA,QAAQ,CAACG,IAAT,KAAkBK,YAAzB;AACH,KAFoB,CAArB;;AAIA,QAAIM,YAAY,KAAK,IAArB,EAA2B;AACvBb,MAAAA,WAAW,CAAC,CAAC;AACTC,QAAAA,EAAE,EAAEU,UAAU,EADL;AAETT,QAAAA,IAAI,EAAEW,YAAY,CAACX,IAFV;AAGTC,QAAAA,IAAI,EAAEU,YAAY,CAACV,IAHV;AAITC,QAAAA,OAAO,EAAES,YAAY,CAACT,OAJb;AAKTC,QAAAA,IAAI,EAAEQ,YAAY,CAACR,IALV;AAMTC,QAAAA,IAAI,EAAEO,YAAY,CAACP;AANV,OAAD,CAAD,CAAX;AAQH,KATD,MASO;AACHS,MAAAA,KAAK,CAAC,0CAAD,CAAL;AACH;AACJ,GAlBD;;AAoBA,sBACI;AAAA,4BACI;AAAgB,MAAA,UAAU,EAAEpB;AAA5B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,aAAD;AAA8B,MAAA,EAAE,EAAEI,QAAQ,CAACE,EAA3C;AAA+C,MAAA,IAAI,EAAEF,QAAQ,CAACG,IAA9D;AAAoE,MAAA,OAAO,EAAEH,QAAQ,CAACK,OAAtF;AAA+F,MAAA,IAAI,EAAEL,QAAQ,CAACM,IAA9G;AAAoH,MAAA,IAAI,EAAEN,QAAQ,CAACO;AAAnI,OAAoBP,QAApB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GA9CeF,Q;;KAAAA,Q","sourcesContent":["import React, { useState } from 'react';\nimport { LocationFrame } from './locationFrame';\nimport { database } from './mockBackend/database';\nimport { SearchForLocation } from './searchForLocation';\n\nexport function Location(props) {\n\n    const [location, setLocation] = useState([{\n        id: '0',\n        name: 'Placeholder',\n        date: '01.02',\n        weather: 'sun',\n        temp: '18',\n        wind: '0'\n    }])\n\n    const locationName = props.text;\n    const datasource = database;\n\n    //Ikke en elegant løsning men enkel\n    let idCounter = 0;\n    const generateId = () => {\n        return idCounter = idCounter + 1;\n    }\n\n    const searchDatabase = (datasource) => {\n\n        const locationData = datasource.filter((location) => {\n            return location.name === locationName;\n        })\n\n        if (locationData !== null) {\n            setLocation([{\n                id: generateId(),\n                name: locationData.name,\n                date: locationData.date,\n                weather: locationData.weather,\n                temp: locationData.temp,\n                wind: locationData.wind\n            }])\n        } else {\n            alert('There exists no location with that name.');\n        }\n    }\n\n    return (\n        <div>\n            <searchDatabase datasource={database}/>\n            <LocationFrame key={location} id={location.id} name={location.name} weather={location.weather} temp={location.temp} wind={location.wind}/>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}