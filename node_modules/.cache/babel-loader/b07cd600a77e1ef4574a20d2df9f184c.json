{"ast":null,"code":"var _jsxFileName = \"/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/addLocationForm.js\",\n    _s = $RefreshSig$();\n\n//Koden er basert på: https://blog.logrocket.com/build-react-autocomplete-component/\nimport React, { useState } from 'react';\nimport { database } from './mockBackend/database';\nimport Trie from './Searchbar/trie';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dictionary = {\n  words: ['hello', 'helium', 'world', 'car', 'carpet', 'test', 'this', 'that', 'those', 'working', 'is']\n};\nexport function AddLocationForm(props) {\n  _s();\n\n  const [text, setText] = useState('');\n  const [suggestion, setSuggerstion] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const data = database;\n  let myTrie = new Trie();\n  /*const dictionary = [];\n  for(let i = 0; i < data.length; i++) {\n      dictionary.push(data[i].name);\n  }*/\n\n  (async () => {\n    for (let i = 0; i < dictionary.length; i++) {\n      const location = dictionary[i];\n      myTrie.insert(location);\n    }\n  })(); //Metod used to change the text state to the live input from the user\n\n\n  const handleInputChange = event => {\n    let inputValue = event.target.value;\n    setText(inputValue);\n    setErrorMessage('');\n    let value = inputValue.split(' ');\n    let triePrefix = value[value.length - 1].toLowerCase();\n    let foundLocations = myTrie.find(triePrefix).sort((a, b) => {\n      return a.length - b.length;\n    });\n    let firstLocation = foundLocations[0];\n\n    if (foundLocations.length !== 0 && inputValue !== '' && inputValue[inputValue.length - 1] !== '') {\n      if (firstLocation !== null) {\n        let remainder = firstLocation.slice(triePrefix.length);\n        setSuggerstion(inputValue + remainder);\n      }\n    } else {\n      setSuggerstion(inputValue);\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.keyCode === 39) {\n      setText(suggestion);\n    }\n  }; //TODO: Implementer en sjekk som unngår at vi kan legge til en lokasjon to ganger.\n  //Bruk props.checkIfPresent funksjon fra locationManager\n\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (text.length > 0) {\n      const locationToAdd = data.find(locations => locations.name === text);\n      const location = {\n        id: props.generateId(),\n        name: text,\n        date: locationToAdd.date,\n        weather: locationToAdd.weather,\n        temp: locationToAdd.temp,\n        wind: locationToAdd.wind\n      };\n      props.addLocation(location);\n      setText('');\n    } else {\n      setText('');\n      setErrorMessage('Please enter a valid location name.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    class: \"inputClass\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"searchBar\",\n      id: \"searchBar\",\n      placeholder: \"Search...\",\n      value: text,\n      onChange: handleInputChange,\n      onKeyDown: handleKeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"searchBar\",\n      id: \"searchBar2\",\n      value: suggestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      hidden: \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      type: \"text\",\n      class: \"App-error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddLocationForm, \"Z4Lg86b5IxQ/5+houRuAC2R1TjM=\");\n\n_c = AddLocationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLocationForm\");","map":{"version":3,"sources":["/Users/sondremelhus/DEV/ReactApps/weatherapp/src/componentes/addLocationForm.js"],"names":["React","useState","database","Trie","dictionary","words","AddLocationForm","props","text","setText","suggestion","setSuggerstion","errorMessage","setErrorMessage","data","myTrie","i","length","location","insert","handleInputChange","event","inputValue","target","value","split","triePrefix","toLowerCase","foundLocations","find","sort","a","b","firstLocation","remainder","slice","handleKeyDown","keyCode","handleSubmit","preventDefault","locationToAdd","locations","name","id","generateId","date","weather","temp","wind","addLocation"],"mappings":"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","sourcesContent":["//Koden er basert på: https://blog.logrocket.com/build-react-autocomplete-component/\n\nimport React, { useState } from 'react';\nimport { database } from './mockBackend/database';\nimport Trie from './Searchbar/trie'\nimport '../App.css';\n\nconst dictionary = {\n    words: ['hello','helium','world','car','carpet','test','this','that','those','working','is']\n  }\n\nexport function AddLocationForm (props) {\n\n    const [text, setText] = useState('');\n    const [suggestion, setSuggerstion] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n\n\n    const data = database;\n    let myTrie = new Trie();\n    \n    /*const dictionary = [];\n    for(let i = 0; i < data.length; i++) {\n        dictionary.push(data[i].name);\n    }*/\n    \n\n    (async() => {\n        for (let i = 0; i < dictionary.length; i++) {\n            const location = dictionary[i];\n            myTrie.insert(location);\n        }\n    })();\n\n    //Metod used to change the text state to the live input from the user\n    const handleInputChange = (event) => {\n        let inputValue = event.target.value;\n\n        setText(inputValue);\n        setErrorMessage('');\n\n        let value = inputValue.split(' ');\n        let triePrefix = value[value.length - 1].toLowerCase();\n        let foundLocations = myTrie.find(triePrefix).sort((a, b) => {\n            return a.length - b.length;\n        })\n\n        let firstLocation = foundLocations[0];\n        \n        if (foundLocations.length !== 0 &&\n            inputValue !== '' &&\n            inputValue[inputValue.length - 1] !== '') {\n\n                if (firstLocation !== null) {\n                    let remainder = firstLocation.slice(triePrefix.length);\n                    setSuggerstion(inputValue + remainder);\n                }\n            } else {\n                setSuggerstion(inputValue);\n            }\n    };\n\n    const handleKeyDown = (event) => {\n        if (event.keyCode === 39) {\n            setText(suggestion);\n        }\n    };\n\n\n    //TODO: Implementer en sjekk som unngår at vi kan legge til en lokasjon to ganger.\n    //Bruk props.checkIfPresent funksjon fra locationManager\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        \n        if(text.length > 0) {\n            const locationToAdd = data.find(locations => locations.name === text)\n\n                const location = {\n                    id: props.generateId(),\n                    name: text,\n                    date: locationToAdd.date,\n                    weather: locationToAdd.weather,\n                    temp: locationToAdd.temp,\n                    wind: locationToAdd.wind\n                }\n\n                props.addLocation(location);\n                setText('');\n        } else {\n            setText('');\n            setErrorMessage('Please enter a valid location name.');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit} class='inputClass'>\n            <input \n                type='text'\n                name='searchBar'\n                id='searchBar'\n                placeholder='Search...'\n                value={text}\n                onChange={handleInputChange}\n                onKeyDown={handleKeyDown}\n            />\n            <input\n                type=\"text\"\n                name=\"searchBar\"\n                id=\"searchBar2\"\n                value={suggestion}\n            />\n            <input type='submit' hidden='true' />\n            <p type='text' class='App-error'>{errorMessage}</p>\n        </form>\n    )\n}"]},"metadata":{},"sourceType":"module"}